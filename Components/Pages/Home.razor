@page "/"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Lifka Bingo</h1>

<div class="bingo-container">
    <div class="bingo-table">
        <table>
            @if (randomWords != null && randomWords.Count == 25) {
                @for (int row = 0; row < 5; row++) {
                    <tr class="bingo-row">
                        @for (int col = 0; col < 5; col++) {
                            int index = row * 5 + col;
                            <td class="bingo-tablecell">
                                <button class="bingo-tablebutton@(buttonStates[index] ? "active" : "")"@onclick="@(e => Select(e, index))">@randomWords[index]</button>
                            </td>
                        }
                    </tr>
                }
            }
            else {
                <tr>
                    <td colspan="5">Loading...</td>
                </tr>
            }
        </table>
    </div>
</div>
<p>@test2</p>

@code {
    int test2;
    Random random = new Random();
    Bingodata bingoData = new Bingodata();

    public List<int>? buttonindex = new List<int>();
    List<string>? randomWords = new List<string>();
    Dictionary<int, bool> buttonStates = new Dictionary<int, bool>();
    private string path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Data", "words.json");

    protected override async Task OnInitializedAsync() {
        try {
            string jsonData = await File.ReadAllTextAsync(path);
            var data = JsonSerializer.Deserialize<Bingodata>(jsonData);
            if (data == null || data.bingoWords == null) {
                throw new Exception("Bingodata or bingoWords is null");
            }

            int lengt = data.bingoWords.Count();
            for (int bingoField = 0; bingoField < 25; bingoField++) {
                int index = random.Next(1, 26);
                string currentWord = data.bingoWords[index];
                if(randomWords!.Contains(currentWord)) {
                    bingoField--;
                    continue;
                } else {
                    randomWords?.Add(currentWord);
                    buttonStates[bingoField] = false;
                }
            }

        } catch(Exception e) {
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
    }

    private void Select(MouseEventArgs e, int index) {
        Console.WriteLine("Button pressed");
        buttonStates[index] = !buttonStates[index];
        test2 = index;
        StateHasChanged();
    }
}
