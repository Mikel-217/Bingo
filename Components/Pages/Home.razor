@page "/"
@rendermode InteractiveServer
@inherits LayoutComponentBase

<PageTitle>Bingo Page</PageTitle>

<h1>Lifka Bingo</h1>

<div class="modal-overlay" style="@(_isVisible ? "display: block;" : "display: none;")">
    <div class="modal-content">
        <h2>BINGOOOOOO</h2>
        <p>Du hast gewonnen!</p>
        <button class="buttonmain" @onclick="Close">Schließen</button>
    </div>
</div>

<div class="bingo-container">
    <div class="bingo-table">
        <table>
            @if (randomWords != null && randomWords.Count == 25) {
                @for (int row = 0; row < 5; row++) {
                    <tr class="bingo-row">
                        @for (int col = 0; col < 5; col++) {
                            int index = row * 5 + col;
                            <td class="bingo-tablecell">
                                <button class="bingo-tablebutton@(buttonStates[index] ? "active" : "")"@onclick="@(e => Select(e, index))">@randomWords[index]</button>
                            </td>
                        }
                    </tr>
                }
            }
            else {
                <tr>
                    <td colspan="5">Loading...</td>
                </tr>
            }
        </table>
    </div>
</div>

@code {
    private bool _bingostate = false;
    private bool _isVisible;

    Random random = new Random();
    Bingodata bingoData = new Bingodata();
    Bingorows bingorows = new Bingorows();
    
    //all Buttonindexes saved
    public List<int>? buttonindex = new List<int>();
    public List<int>? pressedButton = new List<int>();
    Dictionary<int, bool> buttonStates = new Dictionary<int, bool>();

    //random words saved
    List<string>? randomWords = new List<string>();
    private string path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Data", "words.json");

    protected override void OnInitialized() {
        createBingo();
    }
    private void createBingo() {
        randomWords!.Clear();
        buttonindex!.Clear();
        buttonStates!.Clear();
        pressedButton!.Clear();
        bingoData?.bingoWords!.Clear();

        try {
            string jsonData = File.ReadAllText(path);
            var data = JsonSerializer.Deserialize<Bingodata>(jsonData);
            if (data == null || data.bingoWords == null) {
                throw new Exception("Bingodata or bingoWords is null");
            }

            int lengt = data.bingoWords.Count();
            for (int bingoField = 0; bingoField < 25; bingoField++) {
                int index = random.Next(1, 26);
                string currentWord = data.bingoWords[index];
                if(randomWords!.Contains(currentWord)) {
                    bingoField--;
                    continue;
                } else {
                    randomWords?.Add(currentWord);
                    buttonStates[bingoField] = false;
                }
            }

        } catch(Exception e) {
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
    }
    private void Select(MouseEventArgs e, int index) {
        Console.WriteLine("Button pressed");
        buttonStates[index] = !buttonStates[index];
        pressedButton!.Add(index);
        foreach(var test in pressedButton) {
            Console.WriteLine(test);
        }
        checkfBingo();
        StateHasChanged();
    }
    private bool checkfBingo() {
        List<int[]> rows = new List<int[]> {bingorows.bingorow1, bingorows.bingorow2, bingorows.bingorow3, bingorows.bingorow4, bingorows.bingorow5};
        foreach (var row in rows) {
            if (row.All(num => pressedButton!.Contains(num))) {
                _isVisible = true;
                return _bingostate = true;
            } else _bingostate = false;
        }
        return _bingostate;
    }
    
    //for displaying the popup
    @* public void Show() {
        _isVisible = true;
        StateHasChanged();
    } *@

    private void Close() {
        _isVisible = false;
        StateHasChanged();
        createBingo();
    }
}
